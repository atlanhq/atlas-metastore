
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Java CI with Maven

on:
  push:
    branches:
      - alpha
      - beta
      - development
      - master
      - lineageondemand
      - makerlogic
      - mlh41-integration-tests

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/build.sh') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Get branch name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo BRANCH_NAME=${GITHUB_REF#refs/heads/}

      - name: Create Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
                "id": "github",
                "username": "atlan-ci",
                "password": "${{ secrets.ORG_PAT_GITHUB }}"
            }]

      - name: Build with Maven
        run: |
          branch_name=${{ env.BRANCH_NAME }}
          if [[ $branch_name == 'main' || $branch_name == 'master' || $branch_name == 'lineageondemand' ]]
          then
              echo "build without dashboard"
              chmod +x ./build.sh && ./build.sh build_without_dashboard
          else
              echo "build with dashboard"
              chmod +x ./build.sh && ./build.sh
          fi

      - name: Get Repository Name
        run:   echo "REPOSITORY_NAME=`echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//"`" >> $GITHUB_ENV
        shell: bash

      - name: Get version tag
        # run: echo "##[set-output name=version;]$(echo `git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7`)abcd"
        run: |
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | head -n 1)abcd"
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | tr -d '[:space:]')abcd"
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | tr -d '[:space:]')abcd" >> $GITHUB_ENV

      - name: Get commit ID
        run: echo "COMMIT_ID=$(echo ${GITHUB_SHA} | cut -c1-7)abcd" >> $GITHUB_ENV

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.ORG_PAT_GITHUB }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          sbom: true
          provenance: true
          push: true
          tags: |
            ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:latest
            ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}

      - name: Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ubuntu:18.04'
          vuln-type: 'os,library'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2.1.33
        with:
          sarif_file: 'trivy-image-results.sarif'
      - name: Output Image Tag
        run: |
          IMAGE_TAG="ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
        id: image-tag

  # ----- Integration Tests Jobs (appended to the Maven workflow) -----

  deploy-test-environment:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install and Authenticate Loft CLI (Using setup-loft)
        uses: loft-sh/setup-loft@main
        with:
          url: "https://onboarding-tenant.atlan.com"
          access-key: ${{ secrets.LOFT_ACCESS_KEY }}

      - name: Use Loft Virtual Cluster
        run: loft use vcluster enpla9up36 --project default

      - name: Deploy Metastore with New Image
        run: |
          echo "Updating Kubernetes deployment with new image..."
          kubectl set image StatefulSets/atlas atlas-main=${{ steps.image-tag.outputs.IMAGE_TAG }} -n atlas


      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=600s StatefulSets/atlas -n atlas
  

  run-integration-tests:
    runs-on: ubuntu-latest
    needs: deploy-test-environment
    steps:
      - name: Checkout Java SDK Repo
        uses: actions/checkout@v4
        with:
          repository: atlanhq/java-sdk
          ref: main

      - name: Set up JDK for SDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Compile
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: assemble shadowJar test

  list-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.test-files.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - name: List integration tests
        id: test-files
        run: |
          tests=$(ls integration-tests/src/test/java/com/atlan/java/sdk/*Test.java | sed -E 's|.*/src/test/java/com/atlan/java/sdk/||; s|/|.|g; s|\.java$||' | tr '\n' ' ')
          json_tests=$(echo "$tests[@]}" | jq -R -c 'split(" ")[:-1]')
          echo "tests=$json_tests" >> $GITHUB_OUTPUT
  integration-test:
    needs:
      - build
      - list-integration-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests: ${{fromJson(needs.list-integration-tests.outputs.tests)}}
    concurrency:
      group: ${{ matrix.tests }}
    name: "Integration"
    steps:
      - uses: actions/checkout@v4
      # - name: Download artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-artifacts
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
      - name: Integration tests
        uses: burrunan/gradle-cache-action@v1
        env:
          ATLAN_BASE_URL: ${{ secrets.ATLAN_BASE_URL }}
          ATLAN_API_KEY: ${{ secrets.TENANT_API_KEY }}
        with:
          arguments: -PintegrationTests integration-tests:test --tests "com.atlan.java.sdk.${{ matrix.tests }}"
      - if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.tests }}
          path: integration-tests/${{ matrix.tests }}.log

  post-test-results:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Retrieve Test Results
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: target/surefire-reports/

      - name: Post Test Results as PR Comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('target/surefire-reports/test-summary.txt', 'utf8');
            const success = results.includes("Tests run:") && !results.includes("Failures:");
            const comment = success 
              ? "✅ Integration Tests Passed! Ready to merge." 
              : "❌ Integration Tests Failed. Please check the logs.";
            
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if Tests Failed
        run: exit 1
        if: failure()

