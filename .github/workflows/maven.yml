#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Java CI with Maven

on:
  push:
    branches:
      - alpha
      - beta
      - development
      - master
      - staging
      - tagscanary
      - tagscanarymerge
      - fixlabels
      - interceptapis
      - tags_intg_test
      - nb_tags_intg_test
      - prove-ci-blind-fresh


jobs:
  # ==========================================
  # Job 1: Build with Maven
  # Runs on GitHub-hosted (has Maven, internet)
  # ==========================================
  build:
    name: Maven Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Get branch name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo BRANCH_NAME=${GITHUB_REF#refs/heads/}

      - name: Create Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
                "id": "github",
                "username": "atlan-ci",
                "password": "${{ secrets.ORG_PAT_GITHUB }}"
            }]

      - name: Build with Maven
        run: |
          echo "Building Atlas without dashboard"
          chmod +x ./build.sh && ./build.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: atlas-build-${{ github.sha }}
          path: |
            distro/target/*.tar.gz
            webapp/target/*.war
            **/target/*.jar
            **/pom.xml
          retention-days: 1

  # ==========================================
  # Job 2: Integration Tests
  # Runs on self-hosted AWS runner
  # ==========================================
  integration-test:
    name: Integration Tests (AWS)
    needs: build
    runs-on: [atlas-metastore-runner-aws]

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: atlas-build-${{ github.sha }}

      - name: Create Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
                "id": "github",
                "username": "atlan-ci",
                "password": "${{ secrets.ORG_PAT_GITHUB }}"
            }]

      - name: Check disk space
        run: |
          echo "Disk space before tests:"
          df -h / | tail -1

      - name: Free up disk space
        run: |
          echo "Cleaning Docker system..."
          docker system prune -af || true
          rm -rf /tmp/* || true
          df -h / | tail -1

      - name: Verify Docker
        run: |
          docker --version
          docker info

      - name: Run Integration Tests
        id: integration_tests
        continue-on-error: true
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_CHECKS_DISABLE: true
          DOCKER_HOST: unix:///var/run/docker.sock
        run: |
          echo "Running integration tests on AWS EKS..."
          chmod +x ./run-integration-tests.sh && ./run-integration-tests.sh

      - name: Capture container logs on failure
        if: steps.integration_tests.outcome == 'failure'
        run: |
          mkdir -p test-debug-logs
          docker ps -a | tee test-debug-logs/docker-ps.log
          
          for container in $(docker ps -a --format '{{.Names}}'); do
            echo "Capturing logs for: $container"
            docker logs "$container" > "test-debug-logs/${container}.log" 2>&1 || true
          done

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            test-debug-logs/
            **/target/surefire-reports/
          retention-days: 5

      - name: Fail if tests failed
        if: steps.integration_tests.outcome == 'failure'
        run: exit 1

      - name: Cleanup
        if: always()
        run: docker system prune -af || true

  # ==========================================
  # Job 3: Build and Push Docker Image
  # Runs on GitHub-hosted (has internet, multi-arch)
  # Only runs if tests pass
  # ==========================================
  docker-build-push:
    name: Build and Push Docker Image
    needs: [build, integration-test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: atlas-build-${{ github.sha }}

      - name: Get Repository Name
        run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')" >> $GITHUB_ENV

      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Get commit ID
        run: echo "COMMIT_ID=$(echo ${GITHUB_SHA} | cut -c1-7)abcd" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0-28
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ORG_PAT_GITHUB }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: ./Dockerfile
          no-cache: false
          sbom: true
          provenance: true
          push: true
          tags: |
            ghcr.io/atlanhq/${{ env.REPOSITORY_NAME }}-${{ env.BRANCH_NAME }}:latest
            ghcr.io/atlanhq/${{ env.REPOSITORY_NAME }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check Image Manifest
        run: docker buildx imagetools inspect --raw ghcr.io/atlanhq/${{ env.REPOSITORY_NAME }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}

      - name: Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/atlanhq/${{ env.REPOSITORY_NAME }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}'
          vuln-type: 'os,library'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'
