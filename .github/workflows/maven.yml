
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Java CI with Maven

on:
  push:
    branches:
      - beta
      - master
      - staging
      - atlas_ci_cd_updates

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Print JDK version
        run: java -version

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/build.sh') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Get branch name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo BRANCH_NAME=${GITHUB_REF#refs/heads/}

      - name: Create Maven Settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
                "id": "github",
                "username": "atlan-ci",
                "password": "${{ secrets.ORG_PAT_GITHUB }}"
            }]

      - name: Build with Maven
        run: |
          echo "build without dashboard"
          chmod +x ./build.sh && ./build.sh

      - name: Get Repository Name
        run:   echo "REPOSITORY_NAME=`echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//"`" >> $GITHUB_ENV
        shell: bash

      - name: Get version tag
        # run: echo "##[set-output name=version;]$(echo `git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7`)abcd"
        run: |
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | head -n 1)abcd"
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | tr -d '[:space:]')abcd"
          echo "VERSION=$(git ls-remote https://${{ secrets.ORG_PAT_GITHUB }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ env.BRANCH_NAME }} | awk '{ print $1}' | cut -c1-7 | tr -d '[:space:]')abcd" >> $GITHUB_ENV

      - name: Get commit ID
        run: echo "COMMIT_ID=$(echo ${GITHUB_SHA} | cut -c1-7)abcd" >> $GITHUB_ENV

      # QEMU is required to build arm from a non-arm build machine
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0-28
          platforms: arm64

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.ORG_PAT_GITHUB }}

      - name: Build and push with retry
        id: docker_build
        run: |
          # Build and push with retry logic
          echo "Building and pushing Docker image with retry mechanism..."
          retry_count=0
          max_retries=3
          retry_delay=5
          
          while [ $retry_count -lt $max_retries ]; do
            echo "Build and push attempt $((retry_count + 1)) of $max_retries"
            
            if docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --file ./Dockerfile \
              --no-cache \
              --sbom=true \
              --provenance=true \
              --push \
              --tag ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:latest \
              --tag ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }} \
              .; then
              echo "Build and push successful!"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Build and push failed. Retrying in $retry_delay seconds..."
                sleep $retry_delay
              else
                echo "Build and push failed after $max_retries attempts. Exiting."
                exit 1
              fi
            fi
          done

      - name: Check Image Manifest
        run: docker buildx imagetools inspect --raw ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}

      - name: Scan Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/atlanhq/${{ github.event.repository.name }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_ID }}'
          vuln-type: 'os,library'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2.1.33
        with:
          sarif_file: 'trivy-image-results.sarif'

  helm-publish:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart: ['atlas', 'atlas-read']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get branch name
        id: branch
        run: |
          echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Get commit ID
        id: commit
        run: |
          echo "id=$(echo ${GITHUB_SHA} | cut -c1-7)abcd" >> $GITHUB_OUTPUT
      
      - name: Generate chart version
        id: version
        run: |
          # Semantic version: 1.0.0-branch.commitid
          # Replace underscores with hyphens for semver compliance
          BRANCH_NAME_NORMALIZED=$(echo "${{ steps.branch.outputs.name }}" | tr '_' '-')
          CHART_VERSION="1.0.0-${BRANCH_NAME_NORMALIZED}.${{ steps.commit.outputs.id }}"
          echo "chart=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated chart version: ${CHART_VERSION}"
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'
      
      - name: Update Chart.yaml with version
        run: |
          sed -i "s/^version: .*/version: ${{ steps.version.outputs.chart }}/" helm/${{ matrix.chart }}/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"${{ steps.commit.outputs.id }}\"/" helm/${{ matrix.chart }}/Chart.yaml
          
          echo "Updated ${{ matrix.chart }}/Chart.yaml:"
          cat helm/${{ matrix.chart }}/Chart.yaml | grep -E "^(version|appVersion):"
      
      - name: Update values.yaml with image tags
        run: |
          # Replace placeholders with actual values
          sed -i "s/ATLAS_LATEST_IMAGE_TAG/${{ steps.commit.outputs.id }}/g" helm/${{ matrix.chart }}/values.yaml
          sed -i "s/ATLAS_BRANCH_NAME/${{ steps.branch.outputs.name }}/g" helm/${{ matrix.chart }}/values.yaml
          
          echo "Image configuration in ${{ matrix.chart }}/values.yaml:"
          grep -A 3 "image:" helm/${{ matrix.chart }}/values.yaml | head -5
      
      - name: Update helm dependencies
        run: |
          cd helm/${{ matrix.chart }}
          helm dependency update
          
          echo "Chart dependencies:"
          ls -la charts/
      
      - name: Lint helm chart
        run: |
          helm lint helm/${{ matrix.chart }}/
      
      - name: Package helm chart
        run: |
          mkdir -p helm-packages
          helm package helm/${{ matrix.chart }}/ --destination ./helm-packages/
          
          echo "Packaged charts:"
          ls -lh helm-packages/
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.ORG_PAT_GITHUB }}
      
      - name: Push chart to GHCR (OCI Registry)
        run: |
          CHART_FILE=$(ls helm-packages/${{ matrix.chart }}-*.tgz)
          echo "Pushing chart: ${CHART_FILE}"
          
          helm push ${CHART_FILE} oci://ghcr.io/atlanhq/helm-charts
          
          echo "‚úÖ Chart published successfully!"
          echo "üì¶ Chart: ${{ matrix.chart }}"
          echo "üìå Version: ${{ steps.version.outputs.chart }}"
          echo "üè∑Ô∏è  Registry: oci://ghcr.io/atlanhq/helm-charts/${{ matrix.chart }}"
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: helm-${{ matrix.chart }}-v${{ steps.version.outputs.chart }}
          name: "${{ matrix.chart }} Helm Chart v${{ steps.version.outputs.chart }}"
          body: |
            ## üì¶ ${{ matrix.chart }} Helm Chart Release
            
            **Chart**: `${{ matrix.chart }}`  
            **Chart Version**: `${{ steps.version.outputs.chart }}`  
            **App Version**: `${{ steps.commit.outputs.id }}`  
            **Branch**: `${{ steps.branch.outputs.name }}`
            
            ### üê≥ Docker Image
            ```
            ghcr.io/atlanhq/atlas-metastore-${{ steps.branch.outputs.name }}:${{ steps.commit.outputs.id }}
            ```
            
            ### üì• Installation
            
            **Via OCI Registry (Recommended):**
            ```bash
            helm install ${{ matrix.chart }} oci://ghcr.io/atlanhq/helm-charts/${{ matrix.chart }} \
              --version ${{ steps.version.outputs.chart }}
            ```
            
            **Via Downloaded Chart:**
            ```bash
            helm install ${{ matrix.chart }} ./${{ matrix.chart }}-${{ steps.version.outputs.chart }}.tgz
            ```
          artifacts: "./helm-packages/${{ matrix.chart }}-*.tgz"
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: false
      
      - name: Chart publish summary
        run: |
          echo "## üéâ Helm Chart Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Chart**: ${{ matrix.chart }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.chart }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: oci://ghcr.io/atlanhq/helm-charts/${{ matrix.chart }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "helm install ${{ matrix.chart }} oci://ghcr.io/atlanhq/helm-charts/${{ matrix.chart }} --version ${{ steps.version.outputs.chart }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY