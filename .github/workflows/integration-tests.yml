name: Integration Tests for Metastore

on:
  push:
    branches:
      - alpha
      - beta
      - development
      - master
      - lineageondemand
      - makerlogic
      - mlh41-integration-tests

jobs:
  wait-for-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Get commit ID
        run: echo "COMMIT_ID=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      - name: Wait for Matching Revision
        run: |
          MAX_RETRIES=30  # Set maximum number of retries
          SLEEP_TIME=30  # Time in seconds between retries

          for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i: Checking API for matching commit ID..."

              REVISION=$(curl --silent --location 'https://gcpotel.atlan.com/api/meta/admin/version' \
                --header "Authorization: Bearer $(curl --silent --location 'https://gcpotel.atlan.com/auth/realms/default/protocol/openid-connect/token' \
                  --header 'Content-Type: application/x-www-form-urlencoded' \
                  --data-urlencode 'client_id=atlan-argo' \
                  --data-urlencode 'grant_type=client_credentials' \
                  --data-urlencode "client_secret=${{ secrets.ATLAN_ARGO_CLIENT_SECRET }}" | jq -r '.access_token')" | jq -r '.Revision' | cut -c1-7)

              echo "Fetched Revision: $REVISION"
              echo "Expected Commit ID: $COMMIT_ID"

              if [[ "$REVISION" == "$COMMIT_ID" ]]; then
                  echo "✅ Revision matches commit ID! Proceeding to the next step..."
                  exit 0
              fi

              echo "🔄 No match yet. Retrying in $SLEEP_TIME seconds..."
              sleep $SLEEP_TIME
          done

          echo "❌ ERROR: Max retries reached. Commit ID did not match the revision."
          exit 1

  setup-java-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Java SDK Repo
        uses: actions/checkout@v4
        with:
          repository: atlanhq/atlan-java
          ref: main

      - name: Set up JDK for SDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Compile
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: assemble shadowJar test

  list-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.test-files.outputs.tests }}
    steps:
      - name: Checkout Java SDK Repo
        uses: actions/checkout@v4
        with:
          repository: atlanhq/atlan-java
          ref: main

      - name: List integration tests
        id: test-files
        run: |
          tests=$(ls integration-tests/src/test/java/com/atlan/java/sdk/*Test.java | sed -E 's|.*/src/test/java/com/atlan/java/sdk/||; s|/|.|g; s|\.java$||' | tr '\n' ' ')
          json_tests=$(echo "$tests[@]}" | jq -R -c 'split(" ")[:-1]')
          echo "tests=$json_tests" >> $GITHUB_OUTPUT
  integration-test:
    needs:
      - wait-for-deployment
      - setup-java-sdk
      - list-integration-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests: ${{ fromJson(needs.list-integration-tests.outputs.tests) }}
    concurrency:
      group: ${{ matrix.tests }}
    name: "Integration"
    steps:
      - name: Checkout Java SDK Repo
        uses: actions/checkout@v4
        with:
          repository: atlanhq/atlan-java
          ref: main

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Integration tests
        uses: burrunan/gradle-cache-action@v1
        env:
            ATLAN_BASE_URL: "https://gcpotel.atlan.com/"
            ATLAN_API_KEY: ${{ secrets.TENANT_API_KEY }}
        with:
          arguments: -PintegrationTests integration-tests:test --tests "com.atlan.java.sdk.${{ matrix.tests }}"  --rerun-tasks


      - if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.tests }}
          path: integration-tests/${{ matrix.tests }}.log


  report-test-results:
    needs: integration-test
    if: always()  # Run this even if tests fail
    runs-on: ubuntu-latest
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Collect Failed Tests
        id: collect-failures
        run: |
          echo "### Integration Test Results" >> test-summary.md
          echo "" >> test-summary.md
          
          failed_tests=""
          for dir in test-results/*; do
            # Only proceed if this is a directory
            if [ -d "$dir" ]; then
            
             # Find the first .log file within that directory
              log_file=$(find "$dir" -maxdepth 1 -name "*.log" | head -n 1)
              if [ -f "$log_file" ]; then
                echo "--------------------------------------------------"
                echo "Inspecting log for test: $(basename "$dir")"
                echo "Log file path: $log_file"
                echo "--------------------------------------------------"
            
                # Show some portion of the log (maybe first 40 lines) so you can debug
                # You could do full `cat "$log_file"` if you want everything
                head -n 40 "$log_file"
            
                echo "--------------------------------------------------"
                echo "End of log snippet for $(basename "$dir")"
                echo "--------------------------------------------------"
            
                # Count lines that contain 'FAILED'
                # (Adjust pattern if your logs show "FAIL" or "BUILD FAILED" etc.)
                failed_count=$(grep -c " FAILED" "$log_file")
            
                if (( failed_count > 0 )); then
                  echo "❌ Detected $failed_count failure(s) in $(basename "$dir")"
                  failed_tests+="$(basename "$dir")\n"
                else
                  echo "✅ No failures detected in $(basename "$dir")"
                fi
                echo ""
              else
                echo "No .log file found in $dir"
              fi
            fi
          done
          
          # Summarize:
          if [[ -n "$failed_tests" ]]; then
            echo "❌ **Some tests failed.** Please check these directories:"
            echo -e "$failed_tests"
            echo "ALL_TESTS_PASSED=false" >> "$GITHUB_ENV"
          else
            echo "✅ **All tests passed!**"
            echo "ALL_TESTS_PASSED=true" >> "$GITHUB_ENV"
          fi
      - name: Output Test Summary to Logs
        run: |
          echo "--------------------------------------------------"
          echo "✅ Printing the test summary before posting to PR"
          echo "--------------------------------------------------"
          cat test-summary.md  # This prints the content of test-summary.md into the GitHub Actions logs

      - name: Post Comment on PR
        uses: mshick/add-pr-comment@v2
        if: github.event_name == 'pull_request'
        with:
          message-path: test-summary.md
          repo-token: ${{ secrets.GITHUB_TOKEN }}
