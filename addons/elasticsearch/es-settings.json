{
  "mapping" : {
    "total_fields" : {
      "limit" : "5000"
    },
    "nested_objects" : {
      "limit" : "100000"
    }
  },
  "similarity": {
    "default": {
      "type": "boolean"
    }
  },
  "analysis": {
    "analyzer": {
      "atlan_text_delimiter_analyzer": {
        "filter": [
          "trim",
          "text_delimiter_filter",
          "lowercase",
          "remove_duplicates"
        ],
        "type": "custom",
        "tokenizer": "keyword"
      },
      "atlan_search_delimiter_analyzer": {
        "filter": [
          "trim",
          "text_delimiter_filter",
          "lowercase",
          "remove_duplicates"
        ],
        "type": "custom",
        "tokenizer": "whitespace"
      },
      "atlan_path_analyzer": {
        "filter": [
          "trim",
          "remove_duplicates"
        ],
        "type": "custom",
        "tokenizer": "atlan_path_tokenizer"
      },
      "atlan_text_analyzer_v2": {
        "filter": [
          "apostrophe",
          "lowercase"
        ],
        "char_filter": [
          "truncate_filter",
          "number_filter"
        ],
        "type": "custom",
        "tokenizer": "atlan_tokenizer_v2"
      },
      "atlan_glossary_analyzer": {
        "type": "custom",
        "tokenizer": "atlan_glossary_tokenizer",
        "filter": [
          "lowercase"
        ],
        "char_filter": [
          "letter_number_filter"
        ]
      },
      "atlan_text_analyzer": {
        "type": "custom",
        "tokenizer": "atlan_tokenizer",
        "filter": [
          "apostrophe", "lowercase"
        ],
        "char_filter":[
          "truncate_filter",
          "number_filter"
        ]
      },
      "atlan_text_comma_analyzer": {
        "type": "custom",
        "tokenizer": "atlan_comma_tokenizer",
        "filter": [
          "lowercase"
        ]
      },
      "atlan_text_stemmer": {
        "type": "custom",
        "tokenizer": "atlan_tokenizer",
        "filter": [
          "snowball_english", "lowercase"
        ],
        "char_filter":[
          "number_filter"
        ]
      },
      "search_synonyms": {
        "type": "custom",
        "filter": [
          "graph_synonyms", "lowercase"
        ],
        "tokenizer": "atlan_tokenizer"
      },
      "truncate_analyzer": {
        "char_filter": [
          "truncate_filter"
        ],
        "tokenizer": "standard"
      }
    },
    "normalizer": {
      "atlan_normalizer": {
        "type": "custom",
        "filter": ["lowercase"]
      }
    },
    "filter": {
      "graph_synonyms": {
        "type": "synonym_graph",
        "synonyms_path": "synonym.txt"
      },
      "snowball_english": {
        "type": "snowball",
        "language": "English"
      },
      "text_delimiter_filter": {
        "split_on_numerics": "true",
        "generate_word_parts": "true",
        "preserve_original": "true",
        "catenate_words": "false",
        "generate_number_parts": "true",
        "catenate_all": "true",
        "split_on_case_change": "true",
        "type": "word_delimiter_graph",
        "type_table": [
          "# => SUBWORD_DELIM",
          "' => ALPHA"
        ],
        "catenate_numbers": "false",
        "stem_english_possessive": "true"
      }
    },
    "tokenizer": {
      "atlan_path_tokenizer": {
        "type": "path_hierarchy",
        "delimiter": "/",
        "skip": "2"
      },
      "atlan_tokenizer_v2": {
        "pattern": "( |_|-|/|@|,|;|$|#|&|\"|\\.|\\(|\\)|\\[|\\]|\\{|\\}|:)",
        "type": "pattern"
      },
      "atlan_glossary_tokenizer": {
        "type": "char_group",
        "tokenize_on_chars": [
          "whitespace",
          "punctuation",
          "symbol"
        ]
      },
      "atlan_tokenizer": {
        "type": "pattern",
        "pattern": "( |_|-|'|/|@)"
      },
      "atlan_comma_tokenizer": {
        "type": "pattern",
        "pattern": ","
      }
    },
    "char_filter":{
      "letter_number_filter": {
        "type": "pattern_replace",
        "pattern": "\\d+",
        "replacement": " $0 "
      },
      "number_filter":{
        "type":"pattern_replace",
        "pattern":"\\d+",
        "replacement":" $0"
      },
      "truncate_filter": {
        "pattern": "(.{0,100000}).*",
        "type": "pattern_replace",
        "replacement": "$1",
        "flags": "DOTALL"
      }
    }
  }
}
