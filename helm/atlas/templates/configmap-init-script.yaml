apiVersion: v1
kind: ConfigMap
metadata:
  name: atlas-init-script
  namespace: {{ .Values.Namespace  }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  atlas-init.sh: |
    #!/bin/sh
    CASSANDRA_HOST="atlas-cassandra"
    ES_HOST="atlas-elasticsearch-master"
    ES_LOGGING="logging-master.logging.svc.cluster.local"
    
    ### Check cassandra health
    echo "Checking if Cassandra is up and running ..."
    retries=0
    # Try to connect on Cassandra CQLSH port 9042
    nc -z $CASSANDRA_HOST 9042
    cassandra_status=$?

    while [[ $retries -lt 10 && $cassandra_status != 0 ]]; do
        echo "Cassandra doesn't reply to requests on ports 7199 and/or 9042. Sleeping for a while and trying again... retry ${retries}"

        # Sleep for a while
        sleep 2s

        nc -z $CASSANDRA_HOST 9042
        cassandra_status=$?

        let "retries++"
    done

    if [ $cassandra_status -ne 0 ]; then
        echo "/!\ ERROR: Cassandra check has ended with errors"
        exit 1
    else
        echo "Cassandra check completed successfully --- OK"
    fi

    ### Check elastic search health

    es_status=0
    retries=0
    while [[ $retries -lt 10 && $es_status == 0 ]]; do
        echo "Checking if ElasticSearch is up and running ..."

        cluster_color=`curl -XGET -s http://$ES_HOST:9200/_cluster/health | \
            python3 -c 'import sys, json; print(json.dumps(json.load(sys.stdin)["status"], sort_keys=True, indent=4))'`

        echo "Cluster is ${cluster_color}"
        
        if [ "$cluster_color" != "\"green\"" ] && [ "$cluster_color" != "\"yellow\"" ] ; then   
            echo "Elasticsearch $ES_HOST is not up, retrying in 2 secs ..."

            # Sleep for a while
            sleep 2s
        else
            es_status=1
            break
        fi

        let "retries++"
    done

    if [ $es_status -ne 0 ] ; then
        echo "Elasticsearch check completed successfully --- OK"
    else
        echo "/!\ ERROR: Elasticsearch check has ended with errors"
        exit 1
    fi

    # Check logging health and create index with mapping

    es_log_status=0
    retries=0
    while [[ $retries -lt 10 && $es_log_status == 0 ]]; do
        echo "Checking if Logging ElasticSearch is up and running ..."

        cluster_color=`curl -XGET -s http://$ES_HOST:9200/_cluster/health | \
            python3 -c 'import sys, json; print(json.dumps(json.load(sys.stdin)["status"], sort_keys=True, indent=4))'`

        echo "Logging Cluster is ${cluster_color}"
        
        if [ "$cluster_color" != "\"green\"" ] && [ "$cluster_color" != "\"yellow\"" ] ; then   
            echo "Elasticsearch $ES_HOST is not up, retrying in 2 secs ..."

            # Sleep for a while
            sleep 2s
        else
            es_log_status=1
            # create index
            echo "Creating Index ..."
            curl -kv -X PUT "http://$ES_HOST:9200/ranger-audit" \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "mappings": {
                        "properties": {
                            "expire_at": {
                                "type": "date",
                                "store": true,
                                "doc_values": true
                            },
                            "ttl": {
                                "type": "text",
                                "store": true
                            },
                            "version": {
                                "type": "long",
                                "store": true,
                                "index": false
                            },
                            "access": {
                                "type": "keyword"
                            },
                            "action": {
                                "type": "keyword"
                            },
                            "agent": {
                                "type": "keyword"
                            },
                            "agentHost": {
                                "type": "keyword"
                            },
                            "cliIP": {
                                "type": "keyword"
                            },
                            "cliType": {
                                "type": "keyword"
                            },
                            "cluster": {
                                "type": "keyword"
                            },
                            "reqContext": {
                                "type": "keyword"
                            },
                            "enforcer": {
                                "type": "keyword"
                            },
                            "event_count": {
                                "type": "long",
                                "doc_values": true
                            },
                            "event_dur_ms": {
                                "type": "long",
                                "doc_values": true
                            },
                            "evtTime": {
                                "type": "date",
                                "doc_values": true
                            },
                            "id": {
                                "type": "keyword",
                                "store": true
                            },
                            "logType": {
                                "type": "keyword"
                            },
                            "policy": {
                                "type": "long",
                                "doc_values": true
                            },
                            "proxyUsers": {
                                "type": "keyword"
                            },
                            "reason": {
                                "type": "text"
                            },
                            "repo": {
                                "type": "keyword"
                            },
                            "repoType": {
                                "type": "integer",
                                "doc_values": true
                            },
                            "req_caller_id": {
                                "type": "keyword"
                            },
                            "req_self_id": {
                                "type": "keyword"
                            },
                            "reqData": {
                                "type": "text"
                            },
                            "reqUser": {
                                "type": "keyword"
                            },
                            "reqEntityGuid": {
                                "type": "keyword"
                            },
                            "resType": {
                                "type": "keyword"
                            },
                            "resource": {
                                "type": "keyword",
                                "fields": {
                                    "text": {
                                        "type": "text",
                                        "analyzer": "atlan_ranger_text_analyzer"
                                    }
                                }
                            },
                            "result": {
                                "type": "integer"
                            },
                            "seq_num": {
                                "type": "long",
                                "doc_values": true
                            },
                            "sess": {
                                "type": "keyword"
                            },
                            "tags": {
                                "type": "keyword"
                            },
                            "tags_str": {
                                "type": "text"
                            },
                            "text": {
                                "type": "text"
                            },
                            "zoneName": {
                                "type": "keyword"
                            },
                            "policyVersion": {
                                "type": "long"
                            }
                        }
                    },
                    "settings": {
                        "index": {
                            "analysis": {
                                "analyzer": {
                                    "atlan_ranger_text_analyzer": {
                                        "filter": [
                                            "lowercase"
                                        ],
                                        "type": "custom",
                                        "tokenizer": "atlan_ranger_tokenizer"
                                    }
                                },
                                "tokenizer": {
                                    "atlan_ranger_tokenizer": {
                                        "pattern": "( |_|-|'\''|/|@)",
                                        "type": "pattern"
                                    }
                                }
                            }
                        }
                    }
                }'
            break
        fi

        let "retries++"
    done
