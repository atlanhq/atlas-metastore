multiarch:
  enabled: false
  image: {}


## Cassandra image version
## ref: https://hub.docker.com/r/library/cassandra/

global:
  Tier_Type: ""
  Deployment_Type: ""
image:
  repo: ghcr.io/atlanhq/cassandra
  tag: 3.11.12
  pullPolicy: IfNotPresent
  ## Specify ImagePullSecrets for Pods
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  # pullSecrets: myregistrykey

## Specify a service type
## ref: http://kubernetes.io/docs/user-guide/services/
service:
  type: ClusterIP
  annotations: ""

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## Persist data to a persistent volume
# persistence: {}
  # enabled: true
  ## cassandra data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  # accessMode: ReadWriteOnce
  # size: 10Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## Minimum memory for development is 4GB and 2 CPU cores
## Minimum memory for production is 8GB and 4 CPU cores
## ref: http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architecturePlanningHardware_c.html
# resources: {}
  # requests:
  #   memory: 4Gi
  #   cpu: 2
  # limits:
  #   memory: 4Gi
  #   cpu: 2

## Change cassandra configuration parameters below:
## ref: http://docs.datastax.com/en/cassandra/3.0/cassandra/configuration/configCassandra_yaml.html
## Recommended max heap size is 1/2 of system memory
## Recommended heap new size is 1/4 of max heap size
## ref: http://docs.datastax.com/en/cassandra/3.0/cassandra/operations/opsTuneJVM.html
# config:
#   cluster_domain: cluster.local
#   cluster_name: cassandra
#   cluster_size: 3
#   seed_size: 2
#   num_tokens: 256
#   # If you want Cassandra to use this datacenter and rack name,
#   # you need to set endpoint_snitch to GossipingPropertyFileSnitch.
#   # Otherwise, these values are ignored and datacenter1 and rack1
#   # are used.
#   dc_name: DC1
#   rack_name: RAC1
#   endpoint_snitch: SimpleSnitch
#   max_heap_size: 2048M
#   heap_new_size: 512M
#   start_rpc: false
#   ports:
#     cql: 9042
#     thrift: 9160
#     # If a JVM Agent is in place
#     # agent: 61621

# Config for cassandra

max_heap_size: 2048M
heap_new_size: 512M

config:
  cluster_domain: cluster.local
  cluster_name: cassandra
  cluster_size: 3
  dc_name: online-dc
  rack_name: rack1
  endpoint_snitch: GossipingPropertyFileSnitch
  seed_size: 3
  start_rpc: true
  ports:
    cql: 9042


## Cassandra config files overrides
configOverrides: {}

## Cassandra docker command overrides
commandOverrides: []

## Cassandra docker args overrides
argsOverrides: []

## Custom env variables.
## ref: https://hub.docker.com/_/cassandra/
env: {}

## Liveness and Readiness probe values.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 40
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 40
  successThreshold: 1
  failureThreshold: 3
  address: "${POD_IP}"

## Configure node selector. Edit code below for adding selector to pods
## ref: https://kubernetes.io/docs/user-guide/node-selection/
# selector:
  # nodeSelector:
    # cloud.google.com/gke-nodepool: pool-db

## Additional pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
# podAnnotations: {}

## Additional pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

## Additional pod-level settings
podSettings:
  # Change this to give pods more time to properly leave the cluster when not using persistent storage.
  terminationGracePeriodSeconds: 30

## Pod distruption budget
podDisruptionBudget:
  # maxUnavailable: 1
  minAvailable: 2

podManagementPolicy: OrderedReady


updateStrategy:
    type: RollingUpdate

resources:
  requests:
    memory: 4Gi
    cpu: 500m
  limits:
    memory: 5Gi
    cpu: 3000m

# Persistence changes for cassandra
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 10Gi

nodeSelector: {}

podAnnotations: {}
  # backup.velero.io/backup-volumes: data

## Pod Security Context
securityContext:
  enabled: false
  fsGroup: 999
  runAsUser: 999
# PriorityClassName
priorityClassName: ""


antiAffinity: "hard"

custom_deployment:
  enabled: false
  instance_type:
    - m6a.2xlarge

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 1
      preference:
        matchExpressions:
        - key: eks.amazonaws.com/capacityType   #AWS
          operator: In
          values:
          - ON_DEMAND
    - weight: 1
      preference:
        matchExpressions:
        - key: lifecycle     #Azure
          operator: In
          values:
          - ondemand
    - weight: 1
      preference:
        matchExpressions:
        - key: cloud.google.com/gke-provisioning  #GCP
          operator: In
          values:
          - standard  
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: eks.amazonaws.com/capacityType   #AWS
          operator: In
          values:
          - ON_DEMAND
      - matchExpressions:
        - key: lifecycle     #Azure
          operator: In
          values:
          - ondemand
      - matchExpressions:
        - key: cloud.google.com/gke-provisioning  #GCP
          operator: In
          values:
          - standard  
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: "app"
              operator: In
              values:
                - cassandra
        topologyKey: "kubernetes.io/hostname"


## Node tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  # name:

# Use host network for Cassandra pods
# You must pass seed list into config.seeds property if set to true
hostNetwork: false

## Backup cronjob configuration
## Ref: https://github.com/maorfr/cain
# Cassandra backup configuration
backup:
  enabled: false
  schedule:
  - keyspace: atlas
    cron: "0 3 * * *"
  annotations: {}
  image:
    repository: ghcr.io/atlanhq/cain
    tag: 0.6.0
  # Name of the secret containing the credentials of the service account used by GOOGLE_APPLICATION_CREDENTIALS, as a credentials.json file
  extraArgs:
    - -c
    - atlas-cassandra
  google:
    serviceAccountSecret:
  env:
  - name: AWS_REGION
    value: ""
  resources:
    requests:
      memory: 1Gi
    limits:
      memory: 1Gi
  destination: ""


## Cassandra exported configuration
## ref: https://github.com/criteo/cassandra_exporter
exporter:
  # If exporter is enabled this will create a ServiceMonitor by default as well
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    lables:
      release: "prometheus-operator"
    additionalLabels: {}
      # prometheus: default
  image:
    repo: ghcr.io/atlanhq/cassandra_exporter
    tag: 2.0.2
  port: 5556
  jvmOpts: ""
  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 1Gi
    # requests:
    #   cpu: 1
    #   memory: 1Gi

## Sidecar for backup/restore
## ref: https://github.com/instaclustr/icarus
icarus:
  image:
    repo: ghcr.io/atlanhq/cassandra-icarus-atlan-v2
    tag: 1.0.4
  port: 4567
  jvmOpts: ""
  resources:
    limits:
      cpu: 1
      memory: 8Gi
    requests:
      cpu: 0.5
      memory: 2Gi

extraVolumes:
  - name: varlog
    emptyDir: {}
  - name: config
    configMap:
      name: cassandra-online-dc-config
  - name: pre-install
    emptyDir: {}
    
extraVolumeMounts:
  - name: varlog
    mountPath: /var/log/cassandra/

extraContainers:
  - name: cassandra-gclog
    image: ghcr.io/atlanhq/busybox:1.32-multiarch
    args: [/bin/sh, -c, 'sleep 60 && tail -n+1 -F /var/log/cassandra/gc.log.0.current']
    volumeMounts:
    - name: varlog
      mountPath: /var/log/cassandra/
  - name: cassandra-systemlog
    image: ghcr.io/atlanhq/busybox:1.32-multiarch
    args: [/bin/sh, -c, 'sleep 60 && tail -n+1 -F /var/log/cassandra/system.log']
    volumeMounts:
    - name: varlog
      mountPath: /var/log/cassandra/
  - name: cassandra-debug
    image: ghcr.io/atlanhq/busybox:1.32-multiarch
    args: [/bin/sh, -c, 'sleep 60 && tail -n+1 -F /var/log/cassandra/debug.log']
    volumeMounts:
    - name: varlog
      mountPath: /var/log/cassandra/
janusgraph:
  atomic_mutation: true
  cassandra_batch_size_warn_threshold_in_kb: 4096
  cassandra_batch_size_failure_threshold_in_kb: 16384
  commitlog_segment_size_in_mb: 64

reaper:
  enable: true
  image:
    repository: ghcr.io/atlanhq/cassandra-reaper
    tag: 3.4.0
    pullPolicy: IfNotPresent
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  activeDeadlineSeconds: 129600 # 36 hours
  backoffLimit: 0
  port: 8080
  resources:
    requests:
      memory: 512Mi
      cpu: 100m
    limits:
      memory: 2Gi
      cpu: 500m
  env:
    REAPER_AUTH_ENABLED: "false"
    CASSANDRA_REAPER_STORAGE_TYPE: "cassandra"
    CASSANDRA_REAPER_CASS_CONTACT_POINTS: "online-dc"
    CASSANDRA_REAPER_CASS_CLUSTER_NAME: "[atlas-cassandra-online-dc.atlas.svc.cluster.local]"
    REAPER_CASS_KEYSPACE: "reaper_db"
    REAPER_ENABLE_DYNAMIC_SEED_LIST: "true"
    REAPER_ENABLE_CROSS_ORIGIN: "false"
    REAPER_HANGING_REPAIR_TIMEOUT_MINS: "10"
    REAPER_REPAIR_INTENSITY: "0.9"
    REAPER_REPAIR_PARALELLISM: "SEQUENTIAL"
  restartPolicy: OnFailure
  sidecar:
    image:
      repository: ghcr.io/atlanhq/cassandra-reaper-atlan-v2
      tag: 1.4.0
      pullPolicy: IfNotPresent
    resources:
      requests:
        memory: 100Mi
      limits:
        memory: 512Mi
    env:
      REAPER_URL: "http://localhost:8080"
      CLUSTER_SEED_HOST: "atlas-cassandra-online-dc-0.atlas-cassandra-online-dc.atlas.svc.cluster.local,atlas-cassandra-online-dc-1.atlas-cassandra-online-dc.atlas.svc.cluster.local,atlas-cassandra-online-dc-2.atlas-cassandra-online-dc.atlas.svc.cluster.local"
      KEYSPACE_NAME: "atlas"
      PROMETHEUS_PUSHGATEWAY: "http://prometheus-pushgateway.monitoring.svc.cluster.local:9091"
      POLLING_FREQUENCY_IN_SECONDS: "900"
    
  